<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbonejs | Fullstack Development w/ Javascript]]></title>
  <link href="http://www.eguneys.com/blog/categories/backbonejs/atom.xml" rel="self"/>
  <link href="http://www.eguneys.com/"/>
  <updated>2014-09-18T14:14:09+03:00</updated>
  <id>http://www.eguneys.com/</id>
  <author>
    <name><![CDATA[Emre Guneyler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started Fullstack: Site Navigation]]></title>
    <link href="http://www.eguneys.com/blog/2014/01/01/getting-started-fullstack-site-navigation/"/>
    <updated>2014-01-01T11:52:06+02:00</updated>
    <id>http://www.eguneys.com/blog/2014/01/01/getting-started-fullstack-site-navigation</id>
    <content type="html"><![CDATA[<p>In previous post we&rsquo;ve seen how to setup a node.js server and serve our index.html.
In this post, we will implement navigation in our site using backbone.js. At the end of this tutorial,
you will be able to navigate between tabs in your site.</p>

<h1>Router</h1>

<p>Backbone.Router provides methods for routing client-side pages. We will start by creating a custom router
class. Place this in <em>js/app.js</em></p>

<p><div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">AppRouter</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">},</span>

<span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>

<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}))();</span></code></pre></div></p>

<p>When creating a router you may pass its routes hash directly, or manually create a route for the router.
We will do it manually inside initialize function. But first let&rsquo;s define our routes in an object.</p>

<p><em>js/app.js</em>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">NavigationRoutes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Home</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">route</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
        <span class="nx">view</span><span class="o">:</span> <span class="nx">Home</span>
    <span class="p">},</span>
    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">About</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">route</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">About</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
        <span class="nx">view</span><span class="o">:</span> <span class="nx">About</span>
    <span class="p">},</span>
    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="k">default</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">route</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">*</span><span class="k">default</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
        <span class="nx">view</span><span class="o">:</span> <span class="nx">NotFound</span><span class="p">,</span>
        <span class="nx">hide</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div></p>

<p>NavigationRoutes object will keep our routes for the application. The keys are title for the route. &ldquo;route&rdquo; property
is the routing string. &ldquo;view&rdquo; property defines the backbone view objects that will be rendered for the route, they are the <em>Route Views</em> We will
define them later. Finally &ldquo;default&rdquo; key has a &ldquo;hide&rdquo; property telling that it will be hidden on navigation tab.
We can add different properties as we like here, for example &ldquo;permissions&rdquo; property might tell a navigation tab
to be only shown for an admin.</p>

<p>Next we will add these routes to our router. Place this function in your Backbone router.</p>

<p><em>js/app.js</em>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="nx">NavigationRoutes</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">].</span><span class="nx">route</span><span class="p">,</span> <span class="s1">&#39;default&#39;</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">NavigationRoutes</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="o">!=</span> <span class="s2">&quot;default&quot;</span><span class="p">)</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="nx">NavigationRoutes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">route</span><span class="p">,</span> <span class="nx">key</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">},</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Here we traverse NavigationRoutes, and add each route in our router. There is a little logic there for the default
route. We add the default route first, so it becomes the last route to be looked.
The default route is defines as &ldquo;*default&rdquo;, this is called a splat and matches everything in the url. So anything else
that is not defined previously will be matched by default route, and NotFound view will be rendered.</p>

<h1>Navigation View</h1>

<h2>Bootstrap NavBar</h2>

<p>Before we dive into Backbone.View, let&rsquo;s see our html code for the navigation bar. Place this inside your index.html</p>

<p><em>index.html</em>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;navbar navbar-default&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-header&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;navbar-toggle&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">data-toggle=</span><span class="s">&quot;collapse&quot;</span> <span class="na">data-target=</span><span class="s">&quot;#navbar-collapse&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;sr-only&quot;</span><span class="nt">&gt;</span> Toggle navigation<span class="nt">&lt;/span&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
        <span class="nt">&lt;/button&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;navbar-brand&quot;</span> <span class="na">href=</span><span class="s">&#39;#&#39;</span><span class="nt">&gt;</span> Simple Blog <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/div&gt;&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span>  <span class="ni">&amp;lt;</span>div class=&quot;collapse navbar-collapse&quot; id=&quot;navbar-collapse&quot;<span class="ni">&amp;gt;</span>

    <span class="ni">&amp;lt;</span>ul class=&quot;nav navbar-nav&quot; id=&quot;nav-item-container&quot;<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>!-- Navigation tabs will be inside #nav-item-container here --<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
  <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>

<span class="ni">&amp;lt;</span>/nav<span class="ni">&amp;gt;</span>

 <span class="ni">&amp;lt;</span>div class=&quot;container&quot; id=&quot;container&quot;<span class="ni">&amp;gt;</span>

<span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Our Backbone.View for the navigation tabs will control the <em>#nav-item-container</em>.
<em>#container</em> element will contain the navigated content.</p>

<h2>Navigation Bar View</h2>

<p>   Backbone views don&rsquo;t determine anything about HTML, it can be used with any templating library. Underscore.js in this
case. Place this in <em>js/views/nav.js</em></p>

<p><em>js/views/nav.js</em>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">Navbar</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>            <span class="c1">// we pass the NavigationRoutes as an option, later we traverse the routes in render function.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">routes</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">routes</span><span class="p">;</span>


    <span class="c1">// router will fire route event whenever url changes, we rerender our view</span>
    <span class="c1">// on each url change</span>
    <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;route&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
    <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
<span class="p">},</span>

<span class="c1">// events hash that handles events in our view</span>
<span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
            <span class="c1">// click handler for a navigation tab</span>
    <span class="s1">&#39;click a&#39;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">hrefRslt</span> <span class="o">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
        <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span><span class="nx">hrefRslt</span><span class="p">,</span> <span class="p">{</span><span class="nx">trigger</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>

        <span class="c1">// Cancel the regular event handing so that we won&#39;t actually</span>
        <span class="c1">// change URLs We are letting Backbone handle routing</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">},</span>

<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Clear the view element</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>

    <span class="c1">// this is the underscore template for a navigation tab.</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s2">&quot;&amp;lt;li class=&#39;&amp;lt;%=active%&amp;gt;&#39;&amp;gt;&amp;lt;a href=&#39;&amp;lt;%= url%&amp;gt;&#39;&amp;gt;&amp;lt;%=visible%&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;</span><span class="p">);</span>

    <span class="c1">// Traverse the NavigationRoutes</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">)</span>
    <span class="p">{</span>
            <span class="c1">// don&#39;t render if route is hidden</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">hide</span><span class="p">)</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">template</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">route</span><span class="p">,</span> <span class="nx">visible</span><span class="o">:</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">active</span><span class="o">:</span> <span class="nx">route</span> <span class="o">===</span> <span class="nx">key</span> <span class="o">?</span> <span class="s1">&#39;active&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">}));</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span></code></pre></div></p>

<p>   Backbone.View&rsquo;s looks complicated at first, render function is used to render the actual view, in our case, its about manipulating the dom. The dom is referenced by <em>this.el</em>, equal to
<em>#nav-item-container</em>. <em>this.$el</em> references the jquery dom object, equal to <em>$(&lsquo;#nav-item-container&rsquo;)</em>. We don&rsquo;t set <em>this.el</em> in this code
we will pass it as parameter when we initialize our view later.</p>

<p>   <em>template</em> variable defines an <a href="http://underscorejs.org/#template">underscore template</a>. It is our navigation tab. A json model is passed to the template to render actual html.
   Finally html is appended to <em>this.$el</em>. This is done for each element in <em>NavigationRoutes</em>. We can add any logic we wan&rsquo;t here to render, for now,
we only use <em>hide</em> property for the <em>NavigationRoutes</em> to control if a link should be rendered or not.</p>

<h2>Navigated Content View</h2>

<p>Next, we define a view for navigated content. It will control the <em>#container</em> element.</p>

<p><em>js/views/nav.js</em>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">Content</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// pass the NavigationRoutes as an option</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">routes</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">routes</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="c1">// Listen for route changes, and render when a route changes.</span>
    <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;route&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
    <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
<span class="p">},</span>

<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">((</span><span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">route</span><span class="p">].</span><span class="nx">view</span><span class="p">()).</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span></code></pre></div></p>

<p>This is a bit simpler, tricky part is the render function. Here, we initialize the <em>view</em> property defined in our <em>NavigationRoutes</em>, <em>view</em> contains
the Backbone.View elements for each route. Call the render method for the View element. <em>render</em> method will return the Backbone.View, (we will define that later) , so we can access the el property. Finally we set <em>this.$el.html</em> to the dom element of the route view.</p>

<p>Phew, that&rsquo;s quite hard to explain, hope it becomes clear later.</p>

<h2>Individual Route Views</h2>

<p>Next, we define the route views, these will be rendered into the <em>#container</em>. Place this in your <em>js/views/main.js</em>.</p>

<p><em>js/views/main.js</em>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">Home</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#home-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>

<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

<span class="p">},</span>

<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Set the html to the template</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">());</span>

    <span class="c1">// We return this, so parent view can access the this.el property</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">About</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#about-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>

<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

<span class="p">},</span>

<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">());</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">NotFound</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#404-template&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">()),</span>

<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

<span class="p">},</span>

<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">());</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span></code></pre></div></p>

<p>Each view defines an underscore template property. Templates are initialized with some html from jquery dom elements. We will define them later in our index.html. <em>render</em> method simply sets the view&rsquo;s el property to the underscore template, and returns the view which was used in our navigated content view.</p>

<h3>Route View Templates</h3>

<p>We define these templates in our index.html.</p>

<p><em>index.html</em>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>script type=&#39;text/template&#39; id=&#39;home-template&#39;<span class="ni">&amp;gt;</span>
   Home
<span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>

<span class="ni">&amp;lt;</span>script type=&#39;text/template&#39; id=&#39;about-template&#39;<span class="ni">&amp;gt;</span>
  About
<span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>

<span class="ni">&amp;lt;</span>script type=&#39;text/template&#39; id=&#39;404-template&#39;<span class="ni">&amp;gt;</span>
  Oops..
<span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p> Since these templates should not be readily visible in the page, we wrap them in script tags and give each an id. We referenced these templates
with jquery before.</p>

<p>While we&rsquo;re at it, let&rsquo;s add the new script files we&rsquo;ve created to the index.html as well.</p>

<p><em>index.html</em>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://www.eguneys.com/js/views/nav.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://www.eguneys.com/js/views/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://www.eguneys.com/js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span></code></pre></div></p>

<h1>Main Function</h1>

<p><em>js/app.js</em>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">new</span> <span class="nx">Navbar</span><span class="p">({</span><span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#nav-item-container&#39;</span><span class="p">),</span> <span class="nx">routes</span><span class="o">:</span> <span class="nx">NavigationRoutes</span><span class="p">});</span>
<span class="k">new</span> <span class="nx">Content</span><span class="p">({</span><span class="nx">el</span><span class="o">:</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">),</span> <span class="nx">routes</span><span class="o">:</span> <span class="nx">NavigationRoutes</span><span class="p">});</span>


<span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span><span class="nx">pushState</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span></code></pre></div></p>

<p>Finally the main function, initializes <em>Navbar</em> and <em>Content</em> views. And calls <em>Backbone.history.start</em>
We pass the el property for the views here as mentioned previously. and <em>NavigationRoutes</em> is passed as an option.</p>

<p>By default backbone routes the url&rsquo;s with a containing # symbol.
<em>Backbone.history.start</em> is passed <em>pushState:true</em> parameter, to get rid of the #.</p>

<blockquote><p>Congratz, now you have a working implementation of a navigated content using backbone.js</p></blockquote>

<h1>Final Touch</h1>

<p>As a final touch, let&rsquo;s put some html inside our <em>#home-template</em> so it looks more like a blog.</p>

<p><em>index.html</em>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>script type=&#39;text/template&#39; id=&#39;home-template&#39;<span class="ni">&amp;gt;</span>

  <span class="ni">&amp;lt;</span>div class=&quot;row&quot;<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>div class=&quot;col-lg-12&quot;<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>h1 class=&quot;page-header&quot;<span class="ni">&amp;gt;</span> Blog Home <span class="ni">&amp;lt;</span>small<span class="ni">&amp;gt;</span> Blog Homepage<span class="ni">&amp;lt;</span>/small<span class="ni">&amp;gt;&amp;lt;</span>/h1<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>ol class=&quot;breadcrumb&quot;<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;http://www.eguneys.com/&quot;<span class="ni">&amp;gt;</span>Home<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>li class=&quot;active&quot;<span class="ni">&amp;gt;</span>Blog Home <span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>/ol<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>

  <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>

  <span class="ni">&amp;lt;</span>div class=&quot;row&quot;<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>div class=&quot;col-lg-8&quot; id=&quot;blog-list-view&quot;<span class="ni">&amp;gt;</span>


      <span class="ni">&amp;lt;</span>ul class=&quot;pager&quot;<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>li class=&quot;previous&quot;<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;#&quot;<span class="ni">&amp;gt;&amp;amp;</span>larr; Older<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>li class=&quot;next&quot;<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;#&quot;<span class="ni">&amp;gt;</span>Newer <span class="ni">&amp;amp;</span>rarr;<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>

      <span class="ni">&amp;lt;</span>div id=&quot;blog-list-container&quot;<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>

      <span class="ni">&amp;lt;</span>ul class=&quot;pager&quot;<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>li class=&quot;previous&quot;<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;#&quot;<span class="ni">&amp;gt;&amp;amp;</span>larr; Older<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>li class=&quot;next&quot;<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;#&quot;<span class="ni">&amp;gt;</span>Newer <span class="ni">&amp;amp;</span>rarr;<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>

    <span class="ni">&amp;lt;</span>div class=&quot;col-lg-4&quot;<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>div class=&quot;well&quot;<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>h4<span class="ni">&amp;gt;</span> Blog Search <span class="ni">&amp;lt;</span>/h4<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>div class=&quot;input-group&quot;<span class="ni">&amp;gt;</span>
          <span class="ni">&amp;lt;</span>input type=&quot;text&quot; class=&quot;form-control&quot;<span class="ni">&amp;gt;</span>
          <span class="ni">&amp;lt;</span>span class=&quot;input-group-btn&quot;<span class="ni">&amp;gt;</span>
            <span class="ni">&amp;lt;</span>button class=&quot;btn btn-default&quot; type=&quot;button&quot;<span class="ni">&amp;gt;&amp;amp;</span>nbsp;<span class="ni">&amp;lt;</span>i class=&quot;fa fa-search&quot;<span class="ni">&amp;gt;&amp;lt;</span>/i<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/button<span class="ni">&amp;gt;</span>
          <span class="ni">&amp;lt;</span>/span<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>

      <span class="ni">&amp;lt;</span>div class=&quot;well&quot;<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>h4<span class="ni">&amp;gt;</span>Popular Blog Categories<span class="ni">&amp;lt;</span>/h4<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>div class=&quot;row&quot;<span class="ni">&amp;gt;</span>
          <span class="ni">&amp;lt;</span>div class=&quot;col-lg-6&quot;<span class="ni">&amp;gt;</span>
            <span class="ni">&amp;lt;</span>ul class=&quot;list-unstyled&quot;<span class="ni">&amp;gt;</span>
              <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;somestuff&quot;<span class="ni">&amp;gt;</span>some stuff<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
              <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;somestuff&quot;<span class="ni">&amp;gt;</span>some stuff<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
              <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;somestuff&quot;<span class="ni">&amp;gt;</span>some stuff<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
            <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
          <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
      <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
  <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>


<span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
</feed>
